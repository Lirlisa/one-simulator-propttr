#
# Default settings for the simulation
#

## Scenario settings
Scenario.name = propttr_scenario
Scenario.simulateConnections = true
Scenario.updateInterval = 0.1
# 43200s == 12h
Scenario.endTime = 3600

## Interface-specific settings:
# type : which interface class the interface belongs to
# For different types, the sub-parameters are interface-specific
# For SimpleBroadcastInterface, the parameters are:
# transmitSpeed : transmit speed of the interface (bytes per second) 
# transmitRange : range of the interface (meters)

# test interface for all nodes
testInterface.type = SimpleBroadcastInterface
# Transmit speed
testInterface.transmitSpeed = 683
testInterface.transmitRange = 500

# Define 6 different node groups
Scenario.nrofHostGroups = 7

## Group-specific settings:
# groupID : Group's identifier. Used as the prefix of host names
# nrofHosts: number of hosts in the group
# movementModel: movement model of the hosts (valid class name from movement package)
# waitTime: minimum and maximum wait times (seconds) after reaching destination
# speed: minimum and maximum speeds (m/s) when moving on a path
# bufferSize: size of the message buffer (bytes)
# router: router used to route messages (valid class name from routing package)
# activeTimes: Time intervals when the nodes in the group are active (start1, end1, start2, end2, ...)
# msgTtl : TTL (minutes) of the messages created by this host group, default=infinite

## Group and movement model specific settings
# pois: Points Of Interest indexes and probabilities (poiIndex1, poiProb1, poiIndex2, poiProb2, ... )
#       for ShortestPathMapBasedMovement
# okMaps : which map nodes are OK for the group (map file indexes), default=all 
#          for all MapBasedMovent models
# routeFile: route's file path - for MapRouteMovement
# routeType: route's type - for MapRouteMovement


# Common settings for all groups
Group.PropTTRRouter.TTR = 10000

Group.movementModel = ShortestPathMapBasedMovement
Group.router = PropTTRRouter
Group.bufferSize = 5M
Group.waitTime = 120, 300
# All nodes have the test interface
Group.nrofInterfaces = 1
Group.interface1 = testInterface
# Walking speeds
Group.speed = 0.5, 1.5
# Message TTL of 300 minutes (5 hours)
Group.msgTtl = 300

Group.nrofHosts = 40

PointsOfInterest.poiFile1 = data/CentralPOIs.wkt
PointsOfInterest.poiFile2 = data/WestPOIs.wkt


# group1 (pedestrians) specific settings
Group1.groupID = p


# group1 specific settings
Group2.groupID = c
Group2.pois = 1,0.5,2,0.5
# cars can drive only on roads
Group2.okMaps = 1
# 10-50 km/h
Group2.speed = 2.7, 13.9
Group2.nrofHosts = 5

Group3.groupID = t
Group3.bufferSize = 50M
Group3.movementModel = MapRouteMovement
Group3.routeFile = data/tram3.wkt
Group3.routeType = 1
Group3.waitTime = 10, 30
Group3.speed = 7, 10
Group3.nrofHosts = 2
Group3.nrofInterfaces = 1

Group4.groupID = a
Group4.interface1 = testInterface
Group4.pois = 1,0.5
Group4.okMaps = 1
Group4.speed = 2.7, 13.9
Group4.nrofHosts = 5



#estáticos

Group5.groupID = bs1
Group5.router = PropTTRRouterCentral
Group5.bufferSize = 500M
Group5.speed = 0, 0
Group5.movementModel = StationaryMovement
Group5.nodeLocation = 1000, 1000
Group5.nrofHosts = 1
Group5.interface1 = testInterface

Group6.groupID = bs2
Group6.router = PropTTRRouterCentral
Group6.bufferSize = 500M
Group6.speed = 0, 0
Group6.movementModel = StationaryMovement
Group6.nodeLocation = 500, 500
Group6.nrofHosts = 1
Group6.interface1 = testInterface

Group7.groupID = bs3
Group7.router = PropTTRRouterCentral
Group7.bufferSize = 500M
Group7.speed = 0, 0
Group7.movementModel = StationaryMovement
Group7.nodeLocation = 2000, 2000
Group7.nrofHosts = 1
Group7.interface1 = testInterface

#MaxPropConfiguration
#MaxPropRouter.alpha = 0.5
MaxPropRouter.alpha = 0.5
Group.deleteDelivered = true


## Message creation parameters 
# How many event generators
Events.nrof = 1
# Class of the first event generator
Events1.class = MessageEventGenerator
# (following settings are specific for the MessageEventGenerator class)
# Creation interval in seconds (one new message every 25 to 35 seconds)
Events1.interval = 25,35
# Message sizes
Events1.size = 100,200
# range of message source/destination addresses
Events1.hosts = 0,34
# Message ID prefix
Events1.prefix = M


## Movement model settings
# seed for movement models' pseudo random number generator (default = 0)
MovementModel.rngSeed = 1
# World's size for Movement Models without implicit size (width, height; meters)
MovementModel.worldSize = 4500, 3400
# How long time to move hosts in the world before real simulation
MovementModel.warmup = 1000

## Map based movement -movement model specific settings
MapBasedMovement.nrofMapFiles = 4

MapBasedMovement.mapFile1 = data/roads.wkt
MapBasedMovement.mapFile2 = data/main_roads.wkt
MapBasedMovement.mapFile3 = data/pedestrian_paths.wkt
MapBasedMovement.mapFile4 = data/shops.wkt

## Reports - all report names have to be valid report classes

# how many reports to load
Report.nrofReports = 2
# length of the warm up period (simulated seconds)
Report.warmup = 0
# default directory of reports (can be overridden per Report with output setting)
Report.reportDir = reports/
# Report classes to load
Report.report1 = ContactTimesReport
Report.report2 = ConnectivityONEReport

## Default settings for some routers settings
ProphetRouter.secondsInTimeUnit = 30
SprayAndWaitRouter.nrofCopies = 6
SprayAndWaitRouter.binaryMode = true

## Optimization settings -- these affect the speed of the simulation
## see World class for details.
Optimization.cellSizeMult = 5
Optimization.randomizeUpdateOrder = true


## GUI settings

# GUI underlay image settings
GUI.UnderlayImage.fileName = data/helsinki_underlay.png
# Image offset in pixels (x, y)
GUI.UnderlayImage.offset = 64, 20
# Scaling factor for the image
GUI.UnderlayImage.scale = 4.75
# Image rotation (radians)
GUI.UnderlayImage.rotate = -0.015

# how many events to show in the log panel (default = 30)
GUI.EventLogPanel.nrofEvents = 100
# Regular Expression log filter (see Pattern-class from the Java API for RE-matching details)
#GUI.EventLogPanel.REfilter = .*p[1-9]<->p[1-9]$

# Reports - all report names have to be valid report classes
# Cantidad de reportes que generar
Report.nrofReports = 1
# Cantidad de segundos antes de comenzar la simulación
Report.warmup = 0
# Directorio base para generar los reportes
Report.reportDir = reports/
# Clase de reporte a usar. Las clases para reportes están en el directorio "report"
Report.report1 = MessageStatsReport